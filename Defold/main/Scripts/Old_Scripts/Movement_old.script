



local MAX_GROUND_SPEED = 100
local MAX_AIR_SPEED = 80
local MAX_FALL_SPEED = 500

local GRAVITY = -500
local JUMP_TAKEOFF_SPEED = 240
local DOUBLEJUMP_TAKEOFF_SPEED = 200

local CONTACT_POINT_RESPONSE = hash("contact_point_response")
local GROUND = hash("ground")
local RESPAWMN = hash("respawn")
local ENEMY = hash ("enemy")

local HASH_LEFT = hash("Left")
local HASH_RIGHT = hash("Right")
local HASH_UP = hash("Jump")
local HASH_DOWN = hash("Crouch")

local ANIM_WALK = hash("Right_running")
local ANIM_IDLE = hash("Left_idle")
local ANIM_JUMP = hash("Jump")
local ANIM_FALL = hash("Crouch")

local SPRITE = "/Player#sprite"

local function play_animation(self, animation)

	if self.current_animation ~= animation then --The current (starting) animation gets set as the Idle animation which when the movement on the X and Y axis is equal to 0 plays.
		self.current_animation = animation
		msg.post("#sprite", "play_animation", { id = animation })
	end
end

function init(self)
	msg.post("camera", "follow") --The camera will follow the player with the players inputs.
	self.follow = true
	self.current_animation = nil -- the current animation
	self.last_pressed = nil

	self.spawn_position = go.get_position()

	self.velocity = vmath.vector3(0, 0, 0)

	self.direction = 1

	self.correction = vmath.vector3()

	self.ground_contact = true

	self.previous_ground_contact =true

	self.anim = nil
end

local function squish()
	go.animate("visuals", "scale.x", go.PLAYBACK_ONCE_PINGPONG, 0.8, go.EASING_INOUTQUAD, 0.6)
	go.animate("visuals", "scale.y", go.PLAYBACK_ONCE_PINGPONG, 1.2, go.EASING_INOUTQUAD, 0.6)
end

local function update_animations (self)

	sprite.set_hflip(SPRITE, self.direction == -1)

	if self.ground_contact then
		if self.velocity.x == 0 then
			play_animation(self, ANIM_IDLE)
		else
			play_animation(self, ANIM_WALK)
		end
	else
		if self.velocity.y > 0 then
			play_animation(self, ANIM_JUMP)
		else
			play_animation(self, ANIM_FALL)
		end
	end
end

local function clamp (v, min, max)
	if v < min then return min
	elseif v > max then return max
	else return v end
end

local function decelerate (v, f, dt)
	local opposing = math.abs(v * f)
	if v > 0 then
		return math.floor(math.max(0, v - opposing * dt))
	elseif v < 0 then
		return math.ceil(math.min(0, v + opposing * dt))
	else
		return 0
	end
end

function update(self, dt)
	self.velocity.y = self.velocity.y + GRAVITY * dt
	self.velocity.y = clamp(self.velocity.y, -MAX_FALL_SPEED, MAX_FALL_SPEED)

	if self.ground_contact then
		self.velocity.x = decelerate(self.velocity.x, 20, dt)
		self.velocity.x = clamp(self.velocity.x, -MAX_GROUND_SPEED, MAX_GROUND_SPEED)
	else
		self.velocity.x = decelerate(self.velocity.x, 1, dt)
		self.velocity.x = clamp(self.velocity.x, -MAX_AIR_SPEED, MAX_AIR_SPEED)
	end

	local pos = go.get_position()
	pos = pos + self.velocity * dt
	go.set_position(pos)

	update_animations(self)

	self.previous_ground_contact = self.ground_contact
	self.correction = vmath.vector3()
	self.ground_contact = false
	self.wall_contact = false
end

local NORMAL_THRESHOLD = 0.7

local function handle_obstacle_contact (self, normal, distance)

	if normal.y < NORMAL_THRESHOLD and normal.y > -NORMAL_THRESHOLD then
		normal.y = 0
	end
	if normal.x < NORMAL_THRESHOLD and normal.x > -NORMAL_THRESHOLD then
		normal.x = 0
	end

	distance = distance * vmath.length(normal)

	if distance > 0 then
		local proj = vmath.project(self.correction, normal * distance)
		if proj < 1 then

			local comp = (distance - distance * proj) * normal

			go.set_position(go.get_position() + comp)

			self.correction = self.correction + comp
		end
	end

	if math.abs(normal.x) > NORMAL_THRESHOLD then
		self.wall_contact = true
		self.velocity = 0
	end

	if normal.y > NORMAL_THRESHOLD then
		if not self.previous_ground_contact then
			go.set("Player", "scale", 1)
			self.double_jump = false
		end
		self.ground_contact = true
		self.velocity.y = 0
	end

	if noraml.y < -NORMAL_THRESHOLD then
		self.velocity.y = 0
	end
end

function on_message(self, message_id, message, sender)

	if message_id == CONTACT_POINT_RESPONSE then

		if message.group == GROUND then
			handle_obstacle_contact(self, message.normal, message.distance)
		elseif message.group == RESWPAWN or message.group == ENEMY then
			go.set_position(self.spawn_position)
		end
	end
end

local function jump(self)

	if self.ground_contact then

		self.velocity.y = JUMP_TAKEOFF_SPEED

		play_animation(self, ANIM_JUMP)
		self.ground_contact = false

		squish()

	elseif not self.double_jump and self.velocity.y > 0 then
		self.velocity.y = self.velocity.y + DOUBLEJUMP_TAKEOFF_SPEED
		self.double_jump = true
	end
end

local function abort_jump(self)

	if self.velocity.y > 0 then
		self.velocity.y = self.velocity.y * 0.5
	end
end

local function walk (self, direction)
	if direction ~= 0 then
		self.direction = direction
	end
	if self.ground_contact then
		self.velocity.x = MAX_GROUND_SPEED * direction
	else
		self.velocity.x = MAX_AIR_SPEED * direction
	end
end

function on_input(self, action_id, action)
	if action_id == LEFT then
		walk(self, -action.value)
	elseif action_id == RIGHT then
		walk(self, action.value)
	elseif action_id == JUMP then
		if action.pressed then
			jump(self)
		elseif action.released then
			abort_jump(self)
		end
	end
end
