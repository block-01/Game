
local air_acceleration_factor = 0.8 --The acceleration of the player when air borne and not touching any coliders.

local max_speed = 200 --The maximum speed of the Left and Right movement of the Player.

local gravity = -1000 --The gravity pulling down on the player

local jump_takeoff_speed = 500 --The speed at which the player can go up.


-- pre hashing the ids improves the performance of the game and makes it easier to change if needed.
local msg_contact_point_response = hash("contact_point_response")
local msg_animation_done = hash("animation_done")
local group_obstacle = hash("ground")
local input_left = hash("Left")
local input_right = hash("Right")
local input_jump = hash("Jump")
local anim_walk = hash("Walk")
local anim_idle = hash("Idle")
local anim_jump = hash("Jump")
local anim_crouch = hash("Crouch")
local RESPAWMN = hash("respawn")

function init(self)

	msg.post(".", "acquire_input_focus")-- this handles the input in the script

	-- initial player velocity
	self.velocity = vmath.vector3(0, 0, 0)
	-- support variable to keep track of collisions and separation
	self.correction = vmath.vector3()
	-- if the player stands on ground or not
	self.ground_contact = false
	-- the currently playing animation
	self.anim = nil

  msg.post("camera", "follow") --The camera will follow the player with the players inputs.
  self.follow = true
  self.current_animation = nil -- the current animation
  self.last_pressed = nil

  self.spawn_position = go.get_position()-- spawn position sets to the starting position of the player
end

local function play_animation(self, anim)
	-- only play animations which are not already playing
	if self.anim ~= anim then
		-- tell the sprite to play the animation
		sprite.play_flipbook("#sprite", anim)
		-- remember which animation is playing
		self.anim = anim
	end
end

local function update_animations(self)
	-- make sure the player character faces the right way
	sprite.set_hflip("#sprite", self.velocity.x < 0)
	-- make sure the right animation is playing
	if self.ground_contact then
		if self.velocity.x == 0 then
			play_animation(self, anim_idle)
		else
			play_animation(self, anim_walk)
		end
	else
		if self.velocity.y > 0 then
			play_animation(self, anim_jump)
		else
			play_animation(self, anim_crouch) --plays the crouch animation when
		end
	end
end

function update(self, dt)

	self.velocity.y = self.velocity.y + gravity * dt --applys the gravity of the kinematic physics to the player


	local pos = go.get_position() -- moves the player and fetches the current location of the player
	pos = pos + self.velocity * dt --when an input is registered the current position of the player is added to the velocity that the input is set to and then it is multiplyed by Delta Time.
	go.set_position(pos)
--[[
updates the current animation that plays based on the users inputs,
the Left and Right input will play the moving animation the Jump
input will play the jump animation, and the Crouch input will play
the crouch animation. If there is no input then the idle animation will play.
]]--
	update_animations(self)


	self.correction = vmath.vector3()
	self.ground_contact = false --sets the state of the ground collision to false
	self.wall_contact = false --sets the state of the wall collision to false
end

--The bellow function handles the kinematic physics of the player character
--and is not made by me as all of my attemps were buggy or didn't work.
local function handle_obstacle_contact(self, normal, distance)
	if distance > 0 then
		-- First, project the accumulated correction onto
		-- the penetration vector
		local proj = vmath.project(self.correction, normal * distance)
		if proj < 1 then
			-- Only care for projections that does not overshoot.
			local comp = (distance - distance * proj) * normal
			-- Apply compensation
			go.set_position(go.get_position() + comp)
			-- Accumulate correction done
			self.correction = self.correction + comp
		end
	end

	-- collided with a wall
	-- stops all horizontal movement
	if math.abs(normal.x) > 0.7 then
		self.wall_contact = true
		self.velocity.x = 0
	end
	-- collided with the ground
	-- stops all vertical movement
	if normal.y > 0.7 then
		self.ground_contact = true
		self.velocity.y = 0
	end
	-- collided with the ceiling
	-- stops all vertical movement
	if normal.y < -0.7 then
		self.velocity.y = 0
	end
end

function on_message(self, message_id, message, sender)
	-- check if it has received a contact point message
	if message_id == msg_contact_point_response then
		-- check that the object is something we consider an obstacle
		if message.group == group_obstacle then
			handle_obstacle_contact(self, message.normal, message.distance)
		end
	end

  if message.group == RESPAWMN or message.group == ENEMY then
    go.set_position(self.spawn_position) --gets the postion that the player
	--started the level at and sets them to return to that location once the player object has been deleted.
    go.delete(message.group) --deletes the player
  end
  -- check for the message
end

local function jump(self)
	-- only allow jump from ground
	-- (extend this with a counter to do things like double-jumps)
	if self.ground_contact then
		-- set take-off speed
		self.velocity.y = jump_takeoff_speed
		-- play animation
		play_animation(self, anim_jump)
		self.ground_contact = false
	end
end

local function abort_jump(self)
	-- cuts the jump short if we are still going up
	if self.velocity.y > 0 then
		-- scale down the upwards speed
		self.velocity.y = self.velocity.y * 0.5
	end
end

local function walk(self, direction)
	if self.ground_contact then
		self.velocity.x = max_speed * direction --takes the max speed of the player and multiples it by the direction of travel to get the velocity on the X axis.
	else

		self.velocity.x = max_speed * air_acceleration_factor * direction--moves the player slower in the air
	end
end

function on_input(self, action_id, action)
	if action_id == input_left then
		walk(self, -action.value)
	elseif action_id == input_right then
		walk(self, action.value)
	elseif action_id == input_jump then
		if action.pressed then
			jump(self)--if the jump button is pressed then the player moves upwards
		elseif action.released then
			abort_jump(self)--if the jump button has been released then the jump stops
		end
	end
end
